from typing import List
class Solution:
    def isValid(self, s: str) -> bool:
      stack = []
      for c in s:
        if c == '(':
          stack.append(c)
        elif c == ')':
          if len(stack) == 0:
            return False
          stackPop = stack.pop()
          if c == ')':
            if stackPop != '(':
              return False
      return len(stack) == 0
    def longestValidParentheses(self, s: str) -> int:
        maxAnswer = len(s)
        for candidateLength in range(maxAnswer, -1, -1):
          for i in range(0, 1 + len(s) - candidateLength):
            if self.isValid(s[i:i+candidateLength]):
              return candidateLength
        return 0



s = Solution()
input = "(()"
output = 2
lvp = s.longestValidParentheses(input)
print(lvp, lvp == output)

input = ")()())"
output = 4
lvp = s.longestValidParentheses(input)
print(lvp, lvp == output)

input = ")"
output = 0
lvp = s.longestValidParentheses(input)
print(lvp, lvp == output)

input = "())()()(())((()(()()(((()))((((())((()(())()())(()((((()))()(()))(())()(())(()(((((())((((((()())())(()(()((())()))(()))))))()(()))((((())()()()))()()()(((()(()())(()()(()(()()(((()))))))()()))())())((()()))))))((()))(((()((())()(()()))((())))()()())))))))()))))(()))))()))()))()((())))((()))(()))))))(((()))))))))()(()()()(())((())()))()()(())))()()))(()())()))(((()())()))((())((((()))(()(()(()()()(((())()(((((()))((()(((((())(()()))((((((((()(()(()(()(())))(())(()())())(()((((()(())((()(())))(())))()(((((()(()()(())))))))())(())(())(()()(((())))((()))(((((()))))())))()((()))()))))())))))((())(((((()()))((((())))(((()(()(())())(((()(()(()()()())))())()))((()((())())()()()(((())(((((()((((((()((()())))((((())((()(((((((()(()((()()()(()(()())(()(()()((((())))()(((()())))(()()))()(()()()()(((((())(()))))((()))())))()((((((()))())))()(()))(())))((((()())(((((()()())(((((())(()())(()))))()(()()))()))))))())))(((())(()(()()))(()))()(((())))())((((()(((()))))))()(()(()))()()(()()))))))))((()))))))(())((()((()))()))((((((()())))))(()((())((((()))))(()(()()()()(()))()()(()(()))(()()(((((((()())(())(()())((())())()(()())((())()())())(()())))())))(())())())(())((()())(((()()))()))()()))()(()(())((((((((())))()((())((()((((((((((()))))(()(((((())(()(()())())))((())())))))()))(()((()()))((()((())()()()((()(())())((())())(()()(((())))))())()()(()))()())(()(()((())))((((()()(())))())(())(()(()(())())())(()()())()(())())))(()()(((())))((()()(((())()()(()())((((()()(()())(()((((()(()()(()(()(((()((()())(()()))(()((((()(((((()))))()()))(((()((((((()(()()()()())()))(()(())))))((()(((()())())))(((()()))(()(()(((((((()()))(()(())))())()(())())(())(()))(())(()))()()(()()())))))()))()((())(((()((((((((())()()))())))((()())("
output = 310
lvp = s.longestValidParentheses(input)
print(lvp, lvp == output)